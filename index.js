/*

Детерминована фукнция - 
функция, при одних и тех же аргументах в вызове возвращает ЗАВЖДИ один и той самий результат

*/

let superImportantVariable = 50;

function sum(a, b) { // Детерминована фукнция
  superImportantVariable = 20; // это действие не имеет отношения до призначения функции - побочный эфект
  console.log('Как дела??');   // это действие не имеет отношения до призначения функции - побочный эфект
  return a + b;
}

// console.log( sum(2, 2));
// console.log( sum(2, 2));
// console.log( sum(2, 2));
// console.log( sum(2, 2));

let variable = 5;

function addToNumberSomeVariable(number) {
  // НЕДЕТЕРМИНОВАНА ФУКНЦИЯ
  return number + variable;
}

console.log(addToNumberSomeVariable(5)); //10
console.log(addToNumberSomeVariable(5));
console.log(addToNumberSomeVariable(5));
console.log(addToNumberSomeVariable(5));

variable = 20;

console.log(addToNumberSomeVariable(5)); //25

// Если функция работает только с теми данными, которые в нее приходят - Детерминована
// Если функция "вылазит в свет(global scope  и тд.)", то в таком случае, она может не всегда возвращать один и тот же результат при одних и тех же входных параметров - Недетерминована


/*

Чистые функции (Pure Function)

Побочные эфекты - перемены, которые происходят во время выполнения действия и мають вплив на оточуюче середовище
Побочные эфекты - перемены, которые происходят вместе с основным дейсвием и мають вплив на оточуюче середовище

Недетерминомани фукнции с побочными эфектами - фукнции с побочными эфектами (Функции с побочными эфектами по умолчанию называються Недетемринованими)

console.log() - розповсюджений побочный эфект
alert() - розповсюджений побочный эфект
fetch() - запити на сервер або будь-яки сетевые запити - розповсюджений побочный эфект
*/

/*

Чистые функции (Pure Function)
1. Детерминованая фукнция
2. Не маэ побочных эфектов

*/